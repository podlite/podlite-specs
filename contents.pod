=begin pod

=head1 Synopsis 1: Overview
	Project Plan
	Random Thoughts

=head1 Synopsis 2: Bits and Pieces
	One-pass parsing
	Lexical Conventions
		Unicode Semantics
		Bracketing Characters
		Multiline Comments
		Single-line Comments
		Embedded Comments
		User-selected Brackets
		Unspaces
		Comments in Unspaces and vice versa
		Optional Whitespace and Exclusions
			Implicit Topical Method Calls
	Built-In Data Types
		The P6opaque Datatype
		Name Equivalence of Types
		Properties on Objects
			Traits
		Types as Constraints
		Container Types
		Nil
		Type Objects
		Coercive type declarations
		Containers of Native Types
		Methods on Arrays
		Built-in Type Conventions
			The C<.WHICH> Method for Value Types
			The C<ObjAt> Type
		Variables Containing Undefined Values
		The C<HOW> Method
		Roles
		C<Numeric> Types
		Infinity and C<NaN>
		Strings, the C<Str> Type
			The C<StrPos> Type
			The C<StrLen> Type
			Units of Position Arguments
			Numeric Coercion of C<StrPos> or C<StrLen>
		The C<Buf> Type
			Native C<buf> Types
		The C<Whatever> Object
			Autopriming of Unary and Binary Operators with Whatever
			The C<WhateverCode> Types
			Operators with idiosyncratic Whatever
			Non-closure-returning Operators with C<*>
			The C<HyperWhatever> Type
		Native types
		The C<Mu> type
		Undefined types
		Immutable types
		Mutable types
		Of types
		Container types
		Hierarchical types
		Parameter types
		Generic types
	The Cool class (and package)
	Names and Variables
		Apostrophe separator
		Sigils
			Sigils indicate interface
			No intervening whitespace
		Twigils
		Scope declarators
		Invariant sigils
		List stringification
		The C<.perl> method
		The C<.gist> method
		The C<.fmt> method
		Subscripts
			Subscripts have list context
		List assignment and binding
		Parcels
		Parcels, parameters, and Captures
		CaptureCursors
		Signature objects
		Ampersand and invocation
		Specifying a dispatch candidate
		Multidimensional slices and parcels
		Subscript adverbs
		Combining subscript adverbs
		Numeric and boolean context of hashes
		List sorting
		Special variables
		Array end index
	Names
		Package-qualified names
		Pseudo-packages
		Interpolating into names
		Strict lookup
		Direct lookup
		Symbol tables
		Dynamic lookup
		C<DYNAMIC>
		Package lookup
		Globals
		The C<PROCESS> package
		Dynamic variable creation
		The magic input handle
		Magical access to documentation
		Magical lexically scoped values
		The C<COMPILING> pseudopackage
		Switching parsers
		Slangs
		Extended identifiers
	Literals
		Underscores
		Radix markers
		General radices
		Exponentials
		Rational literals
		Complex literals
		C<Blob> literals
		Radix interpolation
		Angle quotes (quote words)
			Explicit Parcel construction
			Empty Parcel
			Disallowed forms
			Relationship between <> and «»
		Adverbial Pair forms
		C<Q> forms
		Adverbs on quotes
		The C<:val> modifier
		Whitespace before adverbs
		Delimiters of quoting forms
		Quotes from Macros
		Interpolating into a single-quoted string
		Interpolation rules
			Arrays
			Hashes
			Sub calls
			Method calls
			Multiple dereferencers
			Closures
			Twigils
			Other expressions
			Class methods
			Old disambiguation
			Topical methods
			Function calls
			Backslash sequences
			Other functions
			Unicode codepoints
			Backslashing
		Bare identifiers
		Dereferences
		Hash subscripts and bare keys
		Double-underscore forms
		Heredocs
			Optional whitespace
			One-pass heredoc parsing
		Allomorphic value semantics
			Allomorphic Rats
	Context
	Lists
		Lazy flattening
		C<list>, C<flat>, C<item>, and C<.tree>
		Forcing capture context
		The C<eager> operator
		The C<hyper> operator
		The C<race> operator
		The C<< => >> operator
		The C<< .. >> operator
		Hash assignment
		The anonymous C<enum> function
		Hash binding
	Files
	Grammatical Categories
	Deprecations

=head1 Synopsis 3: Operators
	Overview
	Operator precedence
		Term precedence
		Method postfix precedence
		Autoincrement precedence
		Exponentiation precedence
		Symbolic unary precedence
		Multiplicative precedence
		Additive precedence
		Replication
		Concatenation
		Junctive and (all) precedence
		Junctive or (any) precedence
		Named unary precedence
		Nonchaining binary precedence
		Chaining binary precedence
		Tight and precedence
		Tight or precedence
		Conditional operator precedence
		Adverbs
		Item assignment precedence
		Loose unary precedence
		Comma operator precedence
		List infix precedence
		List prefix precedence
		Loose and precedence
		Loose or precedence
		Terminator precedence
	Changes to Perl 5 operators
	Junctive operators
	Comparison semantics
	Range and RangeIter semantics
		Unary ranges
		Auto-priming of ranges
	Chained comparisons
	Smart matching
	Invocant marker
	Feed operators
	Meta operators
		Assignment operators
		Negated relational operators
		Reversed operators
		Hyper operators
			Unary hyper operators
				Non-structural unary hyper operators
				Structural unary hyper operators
			Binary hyper operators
		Reduction operators
		Cross operators
		Zip operators
		Sequential operators
		Nesting of metaoperators
		Turning an infix operator into a noun
		Turning a binary function into an infix
	Declarators
	Argument List Interpolating
	Traversing arrays in parallel
	Minimal whitespace DWIMmery
	Sequence points
	Non-declarative metaoperator names

=head1 Synopsis 4: Blocks and Statements
	The Relationship of Lexical and Dynamic Scopes
	The Relationship of Blocks and Declarations
	The Relationship of Blocks and Statements
	Statement-ending blocks
	Conditional statements
	Loop statements
		The C<while> and C<until> statements
		The C<repeat> statement
		The general loop statement
		The C<for> statement
		The do-once loop
		Loops at the statementlist level vs the statement level
		Statement-level bare blocks
		The C<gather> statement prefix
		Other C<do>-like forms
	Switch statements
	Exception handlers
	Control Exceptions
	The goto statement
	Exceptions
	Phasers
	Statement parsing
	Definition of Success
	When is a closure not a closure

=head1 Synopsis 5: Regexes and Rules
	Overview
	New match result and capture variables
	Unchanged syntactic features
	Simplified lexical parsing of patterns
	Modifiers
		Allowed modifiers
	Changed metacharacters
	New metacharacters
	Bracket rationalization
	Variable (non-)interpolation
	Extensible metasyntax (C<< <...> >>)
		Predefined Subrules
	Backslash reform
		Character class shortcuts
	Regexes constitute a first-class language, rather than just being strings
	Backtracking control
	Regex Routines, Named and Anonymous
	Nothing is illegal
	Longest-token matching
	Return values from matches
		Match objects
		Subpattern captures
		Accessing captured subpatterns
		Nested subpattern captures
		Quantified subpattern captures
		Indirectly quantified subpattern captures
		Subpattern numbering
		Subrule captures
		Accessing captured subrules
		Repeated captures of the same subrule
		Aliasing
			Named scalar aliasing to subpatterns
			Named scalar aliases applied to non-capturing brackets
			Named scalar aliasing to subrules
			Numbered scalar aliasing
			Scalar aliases applied to quantified constructs
			Array aliasing
			Hash aliasing
			External aliasing
		Capturing from repeated matches
	Grammars
	Syntactic categories
	Pragmas
	Transliteration
	Substitution
	Positional matching, fixed width types
	Matching against non-strings
	When C<$/> is valid

=head1 Synopsis 6: Subroutines
	Subroutines and other code objects
	Routine modifiers
		Named subroutines
		Anonymous subroutines
		Perl5ish subroutine declarations
		Blocks
		"Pointy blocks"
		Stub declarations
		Globally scoped subroutines
		Dynamically scoped subroutines
		Lvalue subroutines
		Parcel subroutines
		Operator overloading
	Calling conventions
	Signatures
	Parameters and arguments
		Named arguments
		Invocant parameters
		Longname parameters
		Required parameters
		Optional parameters
		Named parameters
		List parameters
		Slurpy block
		Argument list binding
		Parcel binding
		Flattening argument lists
		Multidimensional argument list binding
		Zero-dimensional argument list
		Feed operators
		Closure parameters
		En passant type capture
		Unpacking array parameters
		Unpacking a single list argument
		Unpacking tree node parameters
		Attributive parameters
		Placeholder variables
	Properties and traits
		Subroutine traits
		Parameter traits
		Signature Introspection
	Advanced subroutine features
		Processing of returned values
		The C<return> function
		The C<callframe> and C<caller> functions
		The C<want> function
		The C<leave> function
		Temporization
		Wrapping
		The C<&?ROUTINE> object
		The C<&?BLOCK> object
		Priming
		Macros
		Quasiquoting
		Splicing
	Other matters
		Anonymous hashes vs blocks
		Pairs as lvalues
		Out-of-scope names
		Declaring a C<MAIN> subroutine
		Relationship of MAIN routine with lexical setting
		Implementation note on autothreading of only subs
		Introspection
			Routine
			Signature

=head1 Synopsis 7: Lists and Iteration
	Overview
		The C<List> type
		The C<Array> type
		The C<Parcel> type
		Flattening contexts, the C<Iterable> type
		Iterators
			The C<.reify> method
			The C<.infinite> method
		Levels of laziness
		The laziness level of some common operations
		Common list operations

=head1 Synopsis 8: Capture and Parcel
	Introduction
	Capture or Parcel
	Multidimensionality
	Context deferral
	Additions

=head1 Synopsis 9: Data Structures
	Overview
	Lazy lists
	Sized types
	Compact structs
	Standard array indexing
	Fixed-size arrays
	Typed arrays
	Compact arrays
	Multidimensional arrays
		Autoextending multidimensional arrays
	User-defined array indexing
	Inclusive subscripts
	Negative and differential subscripts
	Mixing subscripts
	PDL support
	Subscript and slice notation
	Cascaded subscripting of multidimensional arrays
	The semicolon operator
	PDL signatures
	Autothreading types
		Junctions
		Each
	Parallelized parameters and autothreading
	Hashes
	Autosorted hashes
	Autovivification

=head1 Synopsis 10: Packages
	Overview
	Packages
	Package nesting
	Autoloading

=head1 Synopsis 11: Compilation Units
	Overview
	Units
	Modules
	Exportation
	Dynamic exportation
	Compile-time Importation
		Loading without importing
		Importing without loading
	Runtime Importation
	Forcing Perl 6
	Tool use vs language changes

=head1 Synopsis 12: Objects
	Overview
	Classes
		Class traits
			Single inheritance
			Multiple inheritance
			Composition
			The C<also> declarator
		Metaclasses
		Closed classes
		Private classes
		Class composition
		Anonymous class declaration
	Methods
		Invocants
		Private methods
		Method scoping
		Method calls
			Fancy method calls
		Lvalue methods
		Scalar container indirection
		FALLBACK methods
	Class methods
	Submethods
	Attributes
		Attribute default values
		Class attributes
	Construction and Initialization
		Semantics of C<bless>
		Cloning
	Mutating methods
	Calling sets of methods
	Parallel dispatch
	Multisubs and Multimethods
		C<multi> Declarations
		C<only> Declarations
		C<proto> Declarations
		C<proto> Signatures
		C<multi> Variables
		C<multi> Routines
		Multisub Resolution
			Candidate Tiebreaking
			Parameter Constraint Exclusion
			Constrained Type Candidates
			Multi Submethods et Cetera
		Method call vs. Subroutine call
	Trusts
	Delegation
	Types and Subtypes
		Abstract vs Concrete types
		Multiple constraints
	Enumerations
		Value Generation
		The Enumeration Type
		Anonymous Enumerations
		Composition from Pairs
		Anonymous Mixin Roles using C<but> or C<does>
		Adding Traits
		Exporting
		Implying a Role
		Built-in Enumerations
		Miscellaneous Rules
		The C<.pick> Method
	Open vs Closed Classes
	Representations
	Interface Consistency
	Introspection
	Custom Meta-objects
	Autovivifying objects

=head1 Synopsis 13: Overloading
	Overview
	Multiple dispatch
	Syntax
	Fallbacks
	Type Casting

=head1 Synopsis 14: Roles and Parametric Types [DRAFT]
	Overview
	Roles
		Compile-time Composition
		Run-time Mixins
	Traits
	Parametric Roles
		Relationship Between of And Types
		Parametric Subtyping
		Interaction of typed and untyped data structures
	String Base Units
	Normalization Forms
		NFG
		NFC and NFD
		NFKC and NFKD
	The C<Str> Type
		Length Methods
	The C<NF*> Types
	The C<Uni> Type
	The C<Unicodey> Role
		Length Methods
	The C<Stringy> Role
	C<Buf> methods
		Decoding buffers
	Unicode Information
		Property Lookup
			Binary Property Lookup
			Binary Category Check
		Numeric Codepoint
		Character Representation
		Character Name
		Numeric Value
	Regexes
		Grapheme Explosion
	Quoting Constructs
	Unicode Literals
		Identifiers
		Numbers
	Pragmas
	Final Considerations

=head1 DRAFT: Synopsis 16: IO / Name Services
	IO
		Overridable IO handles
		Roles and Classes
		Special Quoting Syntax
			Default constraints
			:posix constraints
			:portable
			:local
			:modern constraints
			:win constraints
			:unix constraints
			:bin constraints (no constraints at all)
			Other constraints
		$*CWD
		$*TMPDIR
	Name Services
		User role
		OS::Unix::User role
		Group role
		OS::Unix::NameServices role
	Additions

=head1 Synopsis 17: Concurrency
	Design Philosophy
		Focus on composability
		Boundaries between synchronous and asynchronous should be explicit
		Implicit parallelism is OK
		Make the hard things possible
	Schedulers
	Promises
	Channels
	Supplies
	System events exposed as Supplies
	I/O features exposed as Supplies
	The Event Loop
		Threads
		Atomic Compare and Swap
	Low-level primitives
		Locks
		Semaphore

=head1 DRAFT: Synopsis 19: Command Line Interface
	Command Line Elements
	Backward (In)compatibility
		Unchanged Syntactic Features
		Removed Syntactic Features
	Options and Values
		Remaining arguments
	Option Reference
		Synopsis
		Reference
	Metasyntactic Options
	Environment Variables
	References
	Notes

=head1 DRAFT: Synopsis 21: Calling Foreign Code
	SYNOPSIS
	DESCRIPTION
		Calling foreign code
			The C<is native> trait
			The C<is symbol> trait
			The C<is nativeconv> trait
			The C<is encoded> trait
			Global variables
		Marshalling and demarshalling of Perl 6 data
			Numeric types
			Strings
			The C<OpaquePointer> class
			The C<CPointer> REPR
			The C<CArray> class
			The C<CStruct> REPR
			Callable objects
			Complex data value types
			Varargs
		Miscellaneous helper functions
			Refreshing outdated objects

=head1 Synopsis 22: Package Format [DRAFT]
	OVERVIEW
		Terminology and Scope
		Inspirations
	PACKAGE LAYOUT
		Project directory
		.jib files
	METADATA SPEC
		Supported fields
		Suggested fields[3]
	DEPENDENCIES
		Dependency Notation
			Basic notation:
			More complex examples:
			Serialization Examples

=head1 Synopsis 22: Distributions, Recommendations, Delivery and Installation
	TERMINOLOGY
		compilation unit
		distribution
		owner
		content storage
		auth
		identity
		recommendation manager
	DISTRIBUTION
		META6.json
			perl
			name
			description
			provides
			depends
			emulates
			supersedes
			superseded_by
			excludes
			build-depends
			test-depends
			resource
			support
			production
			license
			tags
		Special directories
			bin
			t
			hooks
		Installation
	CLASSES
		CompUnitRepo
			Specifying a CompUnitRepo
			parse-spec
			new
			short-id
			install
			candidates
		CompUnitRepo::Local::File
			install
		CompUnitRepo::Local::Installation
			install
		Distribution
			meta
			content
		Distribution::Local::Tar
		CompUnit
			new
			load
			loaded
	SYSTEM VARIABLES
		%?RESOURCE
		%*CUSTOM_LIB
		@*INC

=head1 Synopsis 24: Testing
	SYNOPSIS
	DESCRIPTION
		Test plans
		Test functions
		todo() and skip()
	
		General syntactic structure
		
			Delimited blocks
			Paragraph blocks
			Abbreviated blocks
			Declarator blocks
			Block equivalence
			Standard configuration options
		Block types
			Headings
				Numbered headings
			Ordinary paragraph blocks
			Code blocks
				Formatting within code blocks
			I/O blocks
			Lists
				Ordered lists
				Unordered lists
				Multi-paragraph list items
				Definition lists
			Nesting blocks
			Tables
			Named blocks
			Pod comments
			The C<=finish> block
			Data blocks
			Semantic blocks
		Formatting codes
			Significance indicators
			Definitions
			Example specifiers
			Verbatim text
			Inline comments
				Comments as category markers
			Links
			Placement links
			Alias placements
			Space-preserving text
			Entities
			Indexing terms
			Annotations
			Module-defined formatting codes
		Encoding
		Block pre-configuration
			Pre-configuring formatting codes
		Aliases
			Macro aliases
			Contextual aliases
	How Pod is parsed and processed
		Directives
		Blocks
		Formatting codes

=head1 [DRAFT] Synopsis 28 - Special Names [DRAFT]
	Special Variables
		Introduction
		Overview
			Secondary Sigils (also known as "twigils")
			Named variables
			Perl5 to Perl6 special variable translation
		SPECIAL VARIABLES MORE IN DEPTH
			$?KERNEL / $*KERNEL
			$?DISTRO / $*DISTRO
			$?VM / $*VM
			$?PERL / $*PERL
		NOT YET DEFINED
			Form.pm
			S15-unicode.pod
			Infectious trait spec
	Additions

=head1 Synopsis 29: Builtin Functions
	Notes
		Operators vs. Functions
		Multis vs. Functions
	Type Declarations
	Function Packages
		Context
		OS
		Concurrency
		Pending Apocalypse
		Default Functions
		Non-default Functions
			Container
			Numeric
			IO
			Temporal
			String
		Obsolete Functions
			Keywords
	Default Export Questions
	Additions

=head1 [DRAFT] Synopsis 31: Pragmatic Modules
	Overview
	Pragmata
	Additions

=head1 DRAFT: Synopsis 32: Setting Library - Basics
	Roles
		Mu
		Any
		Pattern
		Scalar
	Additions

=head1 DRAFT: Synopsis 32: Setting Library - Callable
	Callable
	Code
	Block
	Signature
	Capture
	WrapHandle
	Routine
	Sub
	Method
	Submethod
	Macro
	Additions

=head1 DRAFT: Synopsis 32: Setting Library - Containers.pod
	Function Roles
		Positional
		Associative
		List
		Array
		Hash
	Classes and Roles
		Range
			Methods
		Buf
			Methods
			C<Buf> Operators
		Enum and Pair
		EnumMap
		PairMap
		Set
		SetHash
		Bag
		BagHash
		QuantHash
		MixHash
		Junction
	Additions

=head1 DRAFT: Synopsis 32: Setting Library - Exceptions
	Roles and Classes
		Exception
		X::OS
		X::IO
			X::IO::Rename
			X::IO::Copy
			X::IO::Mkdir
			X::IO::Chdir
			X::IO::Dir
			X::IO::Cwd
			X::IO::Rmdir
			X::IO::Unlink
			X::IO::Chmod
		X::NYI
		X::AdHoc
		Compile-time errors
			X::Comp
			X::Placeholder::Block
			X::Placeholder::Mainline
			X::Redeclaration
			X::Undeclared
			X::Attribute::Undeclared
			X::Phaser::Multiple
			X::Parameter::Default
			X::Parameter::Placeholder
			X::Parameter::Twigil
			X::Parameter::MultipleTypeConstraints
			X::Parameter::WrongOrder
			X::Signature::NameClash
			X::Method::Private::Permission
			X::Method::Private::Unqualified
			X::Bind::NativeType
			X::Attribute::Package
			X::Attribute::NoPackage
			X::Value::Dynamic
			X::Declaration::Scope
			X::Declaration::Scope::Multi
			X::Anon::Multi
			X::Anon::Augment
			X::Augment::NoSuchType
			X::Package::Stubbed
			X::Inheritance::Unsupported
		Syntax Errors
			X::Syntax
			X::Syntax::Obsolete
			X::Syntax::Name::Null
			X::Syntax::UnlessElse
			X::Syntax::Reserved
			X::Syntax::P5
			X::Syntax::NegatedPair
			X::Syntax::Variable::Numeric
			X::Syntax::Variable::Match
			X::Syntax::Variable::Twigil
			X::Syntax::Variable::IndirectDeclaration
			X::Syntax::Augment::WithoutMonkeyTyping
			X::Syntax::Augment::Role
			X::Syntax::Placeholder
			X::Syntax::Comment::Embedded
			X::Syntax::Pod::BeginWithoutIdentifier
			X::Syntax::Pod::BeginWithoutEnd
			X::Syntax::Confused
			X::Syntax::Malformed
			X::Syntax::Missing
			X::Syntax::SigilWithoutName
			X::Syntax::Self::WithoutObject
			X::Syntax::VirtualCall
			X::Syntax::NoSelf
			X::Syntax::Number::RadixOutOfRange
			X::Syntax::Regex::Adverb
			X::Syntax::Signature::InvocantMarker
			X::Syntax::Extension::Category
			X::Syntax::InfixInTermPosition
		X::Pod
		Dispatch errors
			X::Method::NotFound
			X::Method::InvalidQualifier
		X::OutOfRange
		X::Buf::AsStr
		X::Buf::Pack
		X::Buf::Pack::NonASCII
		X::Bind
		X::Bind::Slice
		X::Bind::ZenSlice
		X::Does::TypeObject
		X::Role::Initialization
		X::Routine::Unwrap
		X::Constructor::Positional
		X::Hash::Store::OddNumber
		X::Phaser::PrePost
		X::Str::Numeric
		X::Str::Match::x
		X::Str::Trans::IllegalKey
		X::Str::Trans::InvalidArg
		X::Range::InvalidArg
		X::Sequence::Deduction
		X::ControlFlow
		X::ControlFlow::Return
		X::Composition::NotComposable
		X::TypeCheck
		X::TypeCheck::Binding
		X::TypeCheck::Return
		X::NoDispatcher
		X::Localizer::NoContainer
		X::Mixin::NotComposable
		X::Export::NameClash
		X::HyperOp::NonDWIM
		X::Set::Coerce
		X::Temporal
		X::Temporal::InvalidFormat
		X::Temporal::Truncation
		X::Eval::NoSuchLang
		X::Numeric::Real
	Related types
		Failure
		Backtrace
	The Default Exception Printer

=head1 DRAFT: Synopsis 32: Setting Library - IO
	Overview
	Functions
	IO Types
		IO
		IO::Handle
		IO::FileTestable
		IO::Path
			OS Specific subclasses.
		IO::Spec
	Here Be Dragons
		IO::Socket
		IO::Socket::INET
	Conjectural Stuff
		IO::ACL
		IO::Pipe
		OS-specific classes
			Unix
			Path::Unix
			IO::Socket::Unix
			IO::POSIX
	Unfilled
	Removed functions
		IO::Buffered
		IO::Streamable
		IO::Encoded
		IO::Readable::Encoded

=head1 DRAFT: Synopsis 32: Setting Library - Numeric
	Function Packages
		Bool
		Numeric
		Real
		Num
		Complex
		Trigonometric functions
		Int
		Rat
	Additions

=head1 DRAFT: Synopsis 32: Setting Library - Rules
	Overview
	Classes
		Regex
		Match
		Cursor
		Grammar
	Additions

=head1 DRAFT: Synopsis 32: Setting Library - Str
	Str
	Additions

=head1 Synopsis 32: Setting Library - Temporal
	Time and time again
	C<time>
	C<DateTime>
		Accessors
	C<Date>
		Constructors
		Instance methods
		Arithmetics
	FOOTNOTE

=head1 Synopsis 99: Glossary
	A
		ack
		actions
		adverb
		adverbial pair
		AFAICS
		AFAICT
		AFAIK
		afk
		Any
		any()
		API
		Apocalypse
		array
		AST
		attribute
		auth
		author
		authority
		autopun
	B
		backlog
		Bailador
		biab
		blast
		brb
		BS
	C
		caller
		CALLER::
		Camelia
		camelia
		capture
		CAS
		circularity saw
		circumfix
		class
		CLI
		clog
		CLR
		compilation unit
		compile time
		compunit
		concurrency
		CPAN
		credentials
		CUR
		CURL
	D
		dalek
		DarkPAN
		dead code
		debugger
		dev
		dies_ok
		diffy
		DIHWIDT
		dispatcher
		distribution
		dynamic
	E
		eager
		ecosystem
		edsel
		EPIC FAIL
		EVAL
		Exegesis
		export
		EXPORT::
	F
		FAIL
		fiddly
		flap
		fork
		fossil
		FSVO
		FTFY
		fudge
	G
		gimme
		gist
		git
		git submodule
		github
		GLOBAL::
		golf
		golfing
		good *
		grammar
		green threads
	H
		hash
		HN
		HN'ed
		HPMoR
		hyper
	I
		IC
		iffy
		IIRC
		IIUC
		import
		infix
		inline
		install
		installer
		Int
		int
		interface
		invocant
		IRC
		ISTR
		item
	J
		jakudo
		JAST
		Junction
		JVM
	K
		karma
		KISS
	L
		lazy
		lexical
		lexical pad
		lexotic
		LHF
		lmddgtfy
		LMGTFY
		LTA
		LTM
	M
		match
		metamodel
		method
		mischan
		MMD
		MoarVM
		module
		MOP
		MRO
		Mu
		multi
		multi method
		multi sub
		multi-method dispatch
		mumble
		my
		MY::
	N
		named parameter
		namespace
		need
		NFG
		Niecza
		NST
		nom
		null-PMC access
		Num
		number
		NQP
	O
		our
		OUR::
		OUTER::
	P
		package
		pad
		Pair
		pair notation
		Panda
		panda bootstrap script
		parakudo
		parrakudo
		Parrot
		parse
		PAST
		PAUSE
		pb
		PDD
		Perlito
		phaser
		PIR
		PMC
		pod
		pod6
		Positional
		positional parameter
		postcircumfix
		postfix
		precedence
		prefix
		private
		PROCESS::
		producer
		proto
		PSGI
		pull request
		pugs
		p5
		p6
	Q
		QAST
	R
		race
		Rakudo
		Rakudo *
		rakudobug
		regex
		regexp
		reification
		reify
		REPL
		repository
		require
		revert
		roast
		role
		RPA
		RC
		RT
		runtime
	S
		sanity test
		scalar
		segfault
		segmentation fault
		serialization
		setting
		sigil
		sink context
		sixplanet
		slurpy
		slushy
		spectest
		spesh
		splat
		star
		STM
		Str
		sub
		subroutine
		Synopsis
	T
		TheDamian
		thinko
		thread
		thunk
		TimToady
		TIMTOWTDI
		TMTOWTDI
		token
		topic
		trait
		TTIAR
		tpyo
		tuit
		twigil
	U
		ufo
		UGT
		unit
		UNIT::
		unslushing
	V
		ver
		VM
		v5
		v6
	W
		warnocked
		WAT
		wfm
		Whatever
		whitespace
		ww
	X
		XY Problem
	Y
		yoleaux
	Z
	*
		.
		..
		...
		:
		?
		*
		@_
		$_
		%_
		++
		&
=end pod