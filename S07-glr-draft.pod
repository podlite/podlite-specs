
=encoding utf8

=head1 TITLE

Synopsis 7: Lists and Iteration [DRAFT]

=head1 VERSION

    Created: 11 June 2015

    Last Modified: 11 June 2015
    Version: 1

=head1 Overview

Lists and arrays have always been one of Perl's fundamental data types,
and Perl 6 is no different.  However, lists in Perl 6 have been greatly
extended to accommodate lazy lists, infinite lists, lists of mutable
and immutable elements, typed lists, flattening behaviors, and so on.
So where lists and arrays in Perl 5 tended to be finite sequences of
scalar values, in Perl 6 we have additional dimensions of behavior
that must be addressed.

This document describes the post-GLR design for lists in Perl 6.
Some portions may contain a fair bit of guesswork.

=head2 The C<List> type

The C<List> class is the base class for dealing with other types of
lists, including C<Array>.  To the programmer, a C<List> is a potentially
lazy and infinite sequence of elements.  

Lists may be mutable, in that one can manipulate the sequence via 
operations such as C<push>, C<pop>, C<shift>, C<unshift>, C<splice>, 
etc.  A C<List>'s elements may be either mutable or immutable.

C<List> objects are C<Positional>, meaning they can be bound to
array variables and support the postfix C<.[]> operator.

Lists are also lazy, in that the elements of a C<List> may
come from generator functions that produce elements on demand.

The comma operator (C<< infix:<,> >>) creates (possibly immutable)
C<List> objects.  The elements of such a list may be mutable or
immutable.  Except for empty lists, parentheses are not used in the
creation of C<List> objects.

    ()       # empty List
    (1)      # an Int
    (1,2)    # a List with two Ints
    (1,)     # a List with one Int

=head2 The C<Array> type

An C<Array> is simply a C<List> in which all of the elements are held
in scalar containers.  This allows assignment to the elements of the
array.

=head2 Flattening contexts

C<List> and objects can have other container objects as elements.  
In some contexts we want to interpolate the values of container 
objects into the surrounding C<List>, while in other contexts we 
want any subcontainers to be preserved.  Such interpolation is
known as "flattening".

The <Iterable> type is performed by container and generator objects
that will interpolate their values in flattening contexts.  C<List>,
and C<Range> objects are C<Iterable>.

Flattening occurs when assigning or initializing an array:

    my @a = 3, 4, 5;
    my @b = 1, 2, @a, 6..9;     # @b has nine elements

    my @c;
    @c = 1, 2, @a;              # @c has five elements

Flattening also occurs using the C<flat> contextualizer:

    for 1, 2, @a { ... }       # three iterations
    for flat 1, 2, @a { ... }  # five iterations

Slurpy array parameters declared with a single C<*> marker lazily 
flatten the arguments into the array.

Conjecture:  An array constructor preceded by a colon flattens its
interior contents.  Array constructors without the colon do not flatten
the interior.

    my $d = :[ 1, <a b c> ]     # four elements, [ 1, 'a', 'b', 'c' ]
    my $e = [ 1, <a b c>  ]     # two elemetns,  [ 1, ('a', 'b', 'c') ]

Objects held in scalar containers are never interpolated in flattening
context, even if the object is C<Iterable>.

    my @a = 3, 4, 5;
    my @b = 1, 2, @a;           # @b has five elements

    my $s = @a;
    my @c = 1, 2, $s;           # @c has three elements

Here, both C<$s> and C<@a> refer to the same underlying C<Array> object,
but the presence of the scalar container prevents C<$s> from being
flattened into C<@c>.  The C<.list> or C<.flat> method may be used
to restore the flattening behavior:

    my @d = 1, 2, $s.list       # @d has five elements
    my @d = 1, 2, @($s)         # @d has five elements

Conversely, the C<.item> or C<$()> contextualizer can be used to
prevent an C<Iterable> from being interpolated:

    my @a = 3, 4, 5;
    my @b = 1, 2, @a;           # @b has five elements
    my @c = 1, 2, $(@a);        # @c has three elements

=head2 Iterables and Iterators

This section gives information about C<Iterable> and C<Iterator> objects.

=head3 The C<.infinite> method

Because lists in Perl 6 can be lazy, they can also be infinite.
Each C<Iterator> must provide an C<.infinite> method, which returns
a value indicating the knowable finiteness of the iteration:

    .infinite     Meaning
    ----------------------------------------------
    True          iteration is known to be infinite
    False         iteration is known to be finite
    Mu            finiteness isn't currently known

As an example, C<Range> iterators can generally know finiteness simply
by looking at the endpoint of the C<Range>.  The iterator for the
C<< infix:<...> >> sequence operator treats any sequence ending in
C<*> as being "known infinite", all other C<...> sequences have unknown
finiteness.  In the general case it's not possible for loop iterators
to definitively know if the sequence will be finite or infinite.
(Conjecture:  There will be a syntax or mechanism for the programmer
to indicate that such sequences are to be treated as known finite
or known infinite.)

=head1 MAJOR CHANGES AND DISCUSSION

During the draft phases of this document, the major changes from pre-GLR
are listed here, along with any side-conjectures and discussion.  Feel
free to add questions or comments below, including references to relevant
#perl6 irclogs as appropriate.

=over 4

=item *

The C<Parcel> type is going away (yay!). C<< infix:<,> >> will 
directly produce C<List> objects.  This changes the way that nested 
parenthesized comma lists react to things like C<.elems>> and C<.[]>.

    (1, (2, 3)).elems             # (pre-GLR) 3; (post-GLR) 2
    (1, 2, 3..7).elems            # (pre-GLR) 7; (post-GLR) 3
       
=item *

The C<for> statement will no longer flatten the value provided to it.  
In fact, C<for> will now be exactly isomorphic to C<.map>:

    foo VALUES { ... }
    VALUES.map( { ... } }      # same thing

This isomorphism even extends to the case where the thing being iterated
is an itemizing container holding an C<Iterable>:

    my $s = <apple banana cherry date eggplant>;
    for $s { .say }           # five iterations
    $s.map: { .say }          # five iterations

The end result is fewer requirements for C<.list> or C<@()>
contextualizers on things being iterated that just happen to be
in scalar containers.

=item *

The C<< circumfix:<[ ]> >> array constructor and C<< circumfix:<{ }> >>
hash constructor are no longer itemized by default.  Use C<$[ ]> and
C<${ }> to explicitly itemize.

This results in several desirable outcomes:

    my @a = [ 1, 2, 3 ];      # @a has three elements
    say @a.perl;              # "[1, 2, 3]" (trailing "<>" not needed)

=item *

Pm thinks/remembers that people preferred C<Iterable> to be a role
instead of a class.

=item *

Looping constructs ( C<while>, C<for>, C<until>, C<loop> ) will be able
to lazily return lists, as described in C<S04>.

Question: Is the special "least surprise" eager behavior of
for-as-a-last-(bare)-statement preserved?

Pm's answer: I'm thinking it's likely to be preserved, yes.  Someone
wanting the lazy behavior will be able to prefix for with C<lazy>, put
the C<for> statement inside parens, or other similar constructs to
suppress the last-statement-eagerness.  The same will be true of the
other looping constructs.  With improved sink context (below), it will
also be possible for block-ending-for-loops to eagerly evaluate without
making a temporary list to hold the (about to be discarded) return
results.

=item *

Because of the above, the GLR will need to improve sink context handling...
in particular by providing caller context.  (Jonathan and Pm have already
had discussions about how this can be achieved.)

=item *

The C<gather/take> statement will become much more efficient.
In particular, it will evolve so that some or all C<take> statements
will be able to populate the list without requiring continuations
and exceptions at every step.  As a result, it's very possible that
some or most of the underlying list-handling code will be based on 
the gather/take system.

=item *

Some miscellaneous notes on list-based methods:

   @list.flat           # never returns self
   @list.list           # may return self
   @list.kv             # returns (0, @list[0], 1, @list[1], ...)
                        # not ( (0, @list[0]), (1, @list[1]), ...)

=item *

A new type is conjectured (let's call it C<Seq> for now, name yet
to be determined) that immediately interpolates a list of values 
into its surrounding list when it is encountered.  A C<Seq> would
be a list that immediately splices its elements into any "outer"
list that contains it.  This would be able to replace the pre-GLR
meaning of C<Nil>, and the temporary C<Empty> type.

Pm's brainstorm of possible names for the conjectured type:  
C<Seq>, C<Listet>, C<Listoid>, C<Clip>, C<Cut>, C<Paste>, C<Insert>

NOTE: The current implemented behavior of C<Nil> in newest rakudos
is mostly post-GLR, though it still shows up in a few places where
it should not.  "Pre-GLR behavior" refers to C<Nil> disappearing
during list flattenning.

=item *

Question: The possibility of a list concatentation operator has been
brought up many times. While the symbol for the operator is unclear
("⟛" is proposed for purposes of discussion only), there hasn't been much
discussion on the semantics of such an operator and how it could play
into the GLR. For example, what would be produced by:

    (1, 2, 3) ⟛ (4..6)
    (1..3) ⟛ [4,5,6]
    [1, 2, 3] ⟛ (4..6)
    [1, 2, 3] ⟛ (4, 5, 6)
    (1, 2, 3) ⟛ [4, 5, 6]

What is its precedence? For example, C<1, 2, 3 ⟛ 4..6> would be useful to
flatten ranges into lists (would C<1, 2, 3, ⟛ 4..6> work?). However, there
might be issues with having it above comma-level precedence.

Pm's Answer:  I think that the conjectured C<Seq> type above eliminates
much of the need for a list concatenation operator, since given two
lists, one can do a join by wrapping one or both in C<Seq> objects:

    Seq(@list1), Seq(@list2)        # concatenate @list1 and @list2

That said, if we want to have an operator for this I might suggest
C<lcat>, or for a method form perhaps C<.ljoin>.   Huffmanly speaking,
I don't see a list concat operation as yet being common enough to
warrant a very short operator.

=back

=head1 AUTHORS

    Patrick R. Michaud <pmichaud@pobox.com

=for vim:set expandtab sw=4:
