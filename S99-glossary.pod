=encoding utf8

=head1 TITLE

Synopsis 99: Glossary

=head1 AUTHORS

    Elizabeth Mattijsen (liz@dijkmat.nl)
    Moritz Lenz
    Larry Wall

=head1 VERSION

    Created: 26 June 2013

    Last Modified: 30 July 2014
    Version: 5

This document tries to define many of the terms used within the Perl 6
community.  It does not have an Apocalypse or Exegesis predecessor.  It
is intended as both a quick introduction to terms used on the #perl6
channel (on freenode), as well as a more permanent, and deeper source of
explanations in the context of Perl 6.

If you, as a reader, miss a term in a glossary, just add the term with the
explanation.  Or if you are not sure what the missing term means, just add a
header for the term.  Without doubt, someone else more knowledgable will add
the explanation later for you and everybody else.

=head1 A

=head2 ack

An improved version of L</grep>, written in Perl (L<http://beyondgrep.com>).

Also used by old folks to indicated acknowledgement.

=head2 actions

A class used to generate an L</AST> from the results of parsing text with a
L</grammar>.

=head2 adverb

See L<adverbial pair>.

=head2 adverbial pair

A generalized form of L</pair notation>.  They all start with the colon, like:

  adverbial pair  | pair notation
  ================|==============
  :foo<bar>       | foo => 'bar'
  :foo(bar)       | foo => bar
  :$foo           | foo => $foo
  :foo            | foo => True
  :!foo           | foo => False

=head2 AFAICS

As Far As I Can See.

=head2 AFAICT

As Far As I Can Tell.

=head2 AFAIK

As Far As I Know.

=head2 afk

Away From Keyboard.  Logged in, but there's noone looking at the screen.

=head2 Any

The class from which most things derive, except for L</Junction>s.

=head2 any()

A Junction with "or" semantics.

=head2 API

Application Programming Interface. Ideally, someone using your system or
library should be able to do so with knowledge only of the API, but not
necessarily knowing anything about the internals or implementation.

=head2 Apocalypse

A document originally written by L</TimToady>, in which he processed the
initial barrage of RFC's that came out of the Perl community.  Now only kept
as an historical document for reference.  See also L</Exegesis> and
L</Synopsis>.

=head2 array

=head2 AST

Short for B<A>bstract B<S>yntax B<T>ree. Used in many places, including
L</actions>, L</PAST>, and L</QAST>.

=head2 attribute

Per-object storage slot. Other languages call it "Field", "Member", "Slot" or
"Property".

=head2 auth

Way of deliberately ambiguously expressing L</author> or L</authority>.

=head2 author

=head2 authority

=head2 autopun

"Are you ignorant or apathetic?" - "I don't know, and I don't care."

=head1 B

=head2 backlog

That part of a discussion on an L</IRC> channel that you've missed.  If it is
not or no longer available in your IRC client, you can go to sites such as
L<http://irc.perl6.org> to see what has been logged for you.

=head2 Bailador

Spanish for "dancer", The Bailador module (L<https://github.com/tadzik/Bailador/>)
is a port of Perl 5's Dancer web framework (L<http://perldancer.org/>).

=head2 biab

Back In A Bit.  Only L</afk> for a little while.

=head2 blast

"B<Bl>ock, B<A>lternatively B<St>atement". Several constructs in Perl 6 expect
either a single statement, or a block. Thus, a blast:

    try { dangerous(); functions() };
    #   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  Block
    try dangerous-function();
    #   ^^^^^^^^^^^^^^^^^^^^          Statement

Particularly cute, because L</phaser>s expect blasts.

=head2 brb

Be Right Back.  Only L</afk> for a little while.

=head2 BS

Bounded Serialization.

=head1 C

=head2 caller

The piece of code (or its lexical environment) that called a given piece of
code. Generally only known at run time.

=head2 CALLER::

A pseudo scope to access variables from the caller's scope.

=head2 Camelia

The butterfly-like logo of Perl 6 as can be observed at L<http://perl6.org>.

=head2 camelia

The IRC-bot on #perl6 that will evaluate code for you in various version of
Perl 5, Perl 6 and NQP.

=head2 capture

A regex can record text that are matched by a certain part of the regex. That
part (and the matched text) is a capture.

For example

    if '..42' ~~ / \.+ (\d+) / {
        #              ^^^^^ capture
        say $0;
        #   ^^ capture variable
    }

=head2 CAS

An atomic Compare And Swap.  Primitive for lock-free multi-threaded read/write
access.

=head2 circularity saw

A pun on "circular saw".  When bootstrapping a language in terms
of itself, we must rely on circular definitions in various places.
Obviously if we were really to use those circular definitions to
implement our language, we'll just get stuck in an infinite regress.
So instead we grab our trusty "circularity saw" to cut those circular
definitions in a spot deep down, hopefully in a way that the resulting
splice will be very difficult for the end-user to notice in day-to-day use.

=head2 circumfix

If a syntactic construct, for example a pair of parenthesis, surrounds another
piece of syntax, the surrounding first part is called a circumfix.

    say (2 + 3);
      # ^^^^^^^ circumfix
    say <a b c>;
      # ^^^^^^^ circumfix

=head2 class

See L<http://en.wikipedia.org/wiki/Class_%28computer_programming%29>

=head2 CLI

Command Line Interface, what you see in a Terminal (window).

=head2 clog

To L</backlog>.

Etymology: There is a website C<irclog.perlgeek.de> providing either IRC logs
or IR clogs, depending on how you interpret the domain name.

=head2 CLR

Common Language Runtime, as used by Niecza/mono/.NET.

=head2 compilation unit

=head2 compile time

=head2 compunit

See L</compilation unit>.

=head2 concurrency

=head2 CPAN

Comprehensive Perl Archive Network.  Content delivery system for Perl
distributions.

=head2 credentials

=head2 CUR

Short for C<CompUnitRepo>, the type of objects that inhabit C<@*INC>.

=head2 CURL

Short for C<CompUnitRepo::Local>, the type of C<CompUnitRepo> objects that
refer to the local file system.

=head1 D

=head2 dalek

An L</IRC> bot that reports when various projects have been updated. It gives
L</karma> to those who pushed the changes to the project.

=head2 DarkPAN

Perl code in production use at companies that has never been uploaded to CPAN.
As in "how will this change affect the DarkPAN", which can't be answered
because you generally don't have access to that code.

=head2 dead code

Code that is never called. For example

    sub f() {
        say 42;
        return;
        # everything below this is dead code,
        # because the return; above prevents it from running
        say 23;
    }

=head2 debugger

A piece of software that helps you to track down errors in your software.
It typically allows things like stepping through code, setting breakpoints
and inspecting variables.

=head2 dev

Either a developer (person), or a development version of a program, or a
branch for development in a repository.

=head2 dies_ok

A C<Test> function that succeeds when its argument, a Code object, dies at run
time. See L<S24>.

=head2 diffy

An operator that produces a result of a type different from its arguments. For
example, all the comparison operators like C<==> and C<lt> are diffy (because
they produce C<Bool>s), the range operators are diffy (because they produce
ranges), but C<+> and C<~> and C<x> are not diffy because they (sorta, kinda)
emit what they accept.

The reason we care about operators being diffy or not is that you can basically
only reduce on non-diffy stuff. So C<[+]> makes sense, but C<[..]> doesn't.
(C<[==]> actually does makes sense even though it's diffy, but that's because
it's also chaining.) You also can't make assignment metaoperators from diffy
operators. So C<+=> makes sense, but C<..=> doesn't.

=head2 DIHWIDT

"Doctor, It Hurts When I Do This."  Well, stop doing it then.

=head2 dispatcher

The piece of code in the runtime that determines which (multi) method or
subroutine to invoke.

=head2 distribution

A collection of 1 or more L</compunit>s for installing locally, or for loading
from a remote location.

=head2 dynamic

=head1 E

=head2 eager

One of the opposites of L</lazy>.

=head2 ecosystem

=head2 edsel

Something that intends to please everyone by catering for everybody's taste,
yet in the end pleasing nobody, because nobody is catered for enough.

=head2 EPIC FAIL

=head2 EVAL

=head2 Exegesis

A document originally written by L</TheDamian>, in which he tried to explain
the L</Apocalypse>s to the common (wo)man.  Now only kept as an historical
document for reference.  See also L</Synopsis>.

=head2 export

=head2 EXPORT::

=head1 F

=head2 FAIL

=head2 fiddly

Used of an operator that doesn't participate in forming metaoperators at all.
(Because that would be "too fiddly" to get to work, presumably.) C<?? !!> is
such an operator. The method call operator is another. (And hence C<.=> is
actually a special case, not a "real" metaoperator.) List assignment is also
fiddly. (But item assignment is not.)

No meta in fiddly things. So you can't reduce, negate, reverse, sequence,
cross, zip, hyperify or assignify fiddly operators.

=head2 flap

Sometimes a test will fail under some conditions, but not others; when
this test passes some test runs and fails others, it's called flapping.

=head2 fork

The creation of another process.

Also, a feature of L</github> that copies a repository from one user to another,
to allow users to make changes to a repository without needing permissions on
the original project. After a user makes changes they will likely submit a
L</pull request>.

=head2 fossil

Something in a generally current document that is no longer true but which has
not yet been fixed by correcting or removing it.

=head2 FSVO

For Some Value Of.

=head2 FTFY

Fixed That For You.

=head2 fudge

Way to temporarily mark tests in the L</spectest> for a specific Perl 6 version
as I<todo> (so that a failure of the test will be marked ok, and a pass will
be marked as an exception), or as I<skip> if they cause a L</compile-time> or
L</runtime> exception.

=head1 G

=head2 gimme

=head2 gist

A summary, or a method on objects that is invoked by L</say> to print out the
object in a human readable format, or a paste server used by denizens of L</IRC>.

See L<https://gist.github.com> for the last usage.

=head2 git

The distributed source revision system used by many, if not all Perl 6
projects.

=head2 git submodule

=head2 github

Online open source repository hoster using L</git>.

=head2 GLOBAL::

=head2 golf

Shortest possible way (least amount of typed characters) to get a program to do
what you want, or to describe a problem or bug.

In the case of bug hunting, the aim is only partly "fewest characters" and
partly "fewest concepts". The aim being to show exactly what concepts are
necessary to trigger the surprising behavior.

=head2 golfing

The process of creating the shortest possible program to prove what you want.

=head2 good *

Good morning/afternoon/evening.  Since the contributors are in many different
timezones, one contributor's morning is another contributor's evening.

=head2 grammar

A feature of Perl 6 that uses L</regex>es to implement a grammar for parsing
text. Perl 6 implementations use grammars themselves to parse the language. The
results of parsing with a grammar can be further passed on to L</actions>.

=head2 green threads

Threads that are scheduled by the virtual machine, not by the operating
system.

=head1 H

=head2 hash

A data type, conveniently available in variables starting with the percent sign
C<%> and provided by type C<Hash>.

=head2 HN

Hacker news as seen on L<https://news.ycombinator.com>.

=head2 HN'ed

Being mentioned on Hacker news (L<https://news.ycombinator.com>).

=head2 HPMoR

Harry Potter and the Methods of Rationality. An inexplicably good Harry Potter
fanfic with far more significance than the word "fanfic" might lead you to
believe. See L<http://hpmor.com>.

=head2 hyper

Process data asynchronously when possible, but return the result data in the
order it would have been if the source data had been processed in a single
thread/process.

=head1 I

=head2 IC

I see.

=head2 iffy

Used of an operator that either returns a C<Bool> result, I<or something like
it> (such as a match object). All the comparison operators are iffy, as are
conditional operators like C<&&>, C<?^>, and C<or>. C<%%> is iffy, but C<%>
isn't. The junctive operators are iffy.

The reason that we care about iffy operators is that you can only append the
C<!> metaoperator to an operator that's iffy.

=head2 IIRC

If I Remember Correctly.

=head2 IIUC

If I Understand Correctly.

=head2 import

=head2 infix

An operator that can appear between two terms.

=head2 inline

=head2 install

=head2 installer

=head2 Int

A built-in arbitrary-sized integer type. See L<http://doc.perl6.org/type/Int>.

=head2 int

=head2 interface

=head2 invocant

=head2 IRC

Internet Relay Chat.  Perl 6 developers and users usually hang out on the
#perl6 channel on C<irc.freenode.org>. See also
L<http://perl6.org/community/irc>.

=head2 ISTR

I Seem To Remember.

=head2 item

=head1 J

=head2 jakudo

L</Rakudo> running on the L</JVM>.

=head2 JAST

Intermediate representation of code used in the JVM backend of Rakudo and NQP.

=head2 Junction

A compound type that is transparent to many operations. See
L<http://doc.perl6.org/type/Junction>.

=head2 JVM

Java Virtual Machine.

=head1 K

=head2 karma

A measure of how popular something is on L</IRC>. Example: 
"jnthn++ # moar commit"

=head2 KISS

Keep It Simple, Stupid!

=head1 L

=head2 lambda

An anonymous function

=head2 lazy

The property of a list not to evaluate elements until they are needed.

=head2 lexical

Lexical properties are derived from the structure of the source code itself,
not from any information from run time.

=head2 lexical pad

A data structure that holds the values of lexical variables.

=head2 lexotic

A dynamic operation with a lexically scoped target. For example, C<return> has
a dynamic effect (it peels back the call stack), but the thing it's returning
from is a lexically defined routine.

=head2 LHF

Low Hanging Fruit.

=head2 lmddgtfy

Let Me DuckDuckGo That For You.  L<http://lmddgtfy.net>

=head2 LMGTFY

Let Me Google That For You.  L<http://lmgtfy.com/>

=head2 LTA

Less Than Awesome.

=head2 LTM

Longest Token Matching. See L<S05/Longest Token Matching>.

=head1 M

=head2 match

=head2 metamodel

=head2 method

=head2 mischan

A case of having put a message on the wrong (IRC) channel.

=head2 MMD

See L</multi-method dispatch>.

=head2 MoarVM

A virtual machine designed specifically for L</NQP> and its L</MOP>: L</6model>.

=head2 module

=head2 MOP

Meta-Object Protocol.

=head2 MRO

Method Resolution Order

=head2 Mu

The mystical class from which all other classes are derived (無).

=head2 multi

=head2 multi method

=head2 multi sub

=head2 multi-method dispatch

=head2 mumble

Placeholder; Something that's left unclear deliberately. Either because the
speaker doesn't know or because it's an unimportant detail.

=head2 my

=head2 MY::

=head1 N

=head2 named parameter

=head2 namespace

=head2 need

=head2 NFA

Nondeterministic Finite Automaton, an algorithmic technique used by the
regex engine.  See: L<https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton>.

=head2 NFG

Proposed Unicode normilization form for Perl6, in which composed
characters always get their own codepoint. If a codepoint doesn't exist
for that composed character, one is assigned dynamically.

Documentation for this can hypothetically be found in L<S15>.

=head2 Niecza

An implementation of Perl 6 targeting the .NET platform.

=head2 NST

No Such Thing.

=head2 nom

The name of the main branch of current L</Rakudo> in L</git>.
Originally named so for its "new object model".

=head2 null-PMC access

=head2 Num

=head2 number

=head2 NQP

Short for B<N>ot B<Q>uite B<P>erl, a subset of Perl 6 suitable for tasks such as
implementing L</Rakudo>. Targets L</Parrot> and the L</JVM>, with work underway
on targeting L</MoarVM>.

=head1 O

=head2 our

=head2 OUR::

=head2 OUTER::

=head1 P

=head2 package

=head2 pad

See L</lexical pad>.

=head2 Pair

The simplest object containing a key and value pair.

=head2 pair notation

Way of expressing key/value pairs, using the L</fat comma>, creating a L</Pair>
object, for instance:

  foo => 1

=head2 Panda

A Perl 6 program designed to make it easier to install L</module>s.

=head2 panda bootstrap script

=head2 parakudo

L</Rakudo> running on L</Parrot>.

=head2 parrakudo

See L</parakudo>.

=head2 Parrot

A virtual machine designed to run Perl 6 and other dynamic languages.

=head2 parse

=head2 PAST

Parrot L</AST>.

=head2 PAUSE

Perl Authors Upload SErvice.  The place where author upload their distributions
to L</CPAN>.

=head2 pb

Short for "problem".  As in "that's not the pb".

=head2 PDD

Parrot Design Document. Numbered documents detailing various parts of the
design of Parrot.

Could also be used to refer to "Presentation-Driven Development", the
practice of implementing a feature after having submitted a presentation
about said feature.

=head2 Perlito

A compiler project that has frontends for Perl 5 and Perl 6, and multiple
backends.

=head2 phaser

A piece of code (a L</blast>) that runs at a particular phase in the program's
lifecycle, for example during compilation (C<BEGIN>), the first time a loop is
entered (C<FIRST>), or after al regular code has run (C<END>).

=head2 PIR

Parrot Intermediate Representation.

=head2 PMC

Parrot Magic Cookie.

=head2 pod

B<P>lain B<O>l' B<D>ocumentation, a documentation format understood by Perl
6. See L</S26> for details.

=head2 pod6

Used to specify Perl 6's version of L</pod>, as opposed to Perl 5's.

=head2 pointy block

See L</lambda>

=head2 Positional

=head2 positional parameter

=head2 postcircumfix

=head2 postfix

An operator that comes after the term it belongs to.

=head2 precedence

The order in which operators bind terms together; tighter precedence
evaluates before looser precedence.  See L<S03/Operator precedence>
for details.

=head2 prefix

An operator that comes before the term it belongs to, for example

    say ?42;    # True
    #   ^ prefix operator

=head2 private

=head2 PROCESS::

=head2 producer

=head2 proto

=head2 PSGI

=head2 pull request

A feature of L</github> that's used after a user has L</fork>ed a project and
made changes to it that they wish to have in the main project.

=head2 pugs

A Perl 6 implemetation in Haskell, led by the efforts of Audrey Tang.
The first truly usable Perl 6 implementation, it was actively developed 2005
through 2007.  Currently on life support.

=head2 p5

Short for Perl 5, the (older brother|parent) of Perl 6.

=head2 p6

Short for Perl 6, the (spunky little sister|child) of Perl 5.

=head1 Q

=head2 QAST

Successor to L</PAST>.

=head1 R

=head2 race

Process data asynchronously when possible, and don't care in which order the
result data is returned.

=head2 Rakudo

An implementation of Perl 6 originally targeting L</Parrot>, it now targets
Parrot, the L</JVM>, and (soon) L</MoarVM> through L</NQP>.

=head2 Rakudo *

Rakudo Star, a useful and supposedly monthly distribution of Rakudo which
includes modules and L</Panda>.

=head2 rakudobug

A bug in L</rakudo>.  Usually used in contexts such as "/me submits rakudobug".

=head2 regex

Short for B<Reg>ular B<Ex>pressions, an easy way of parsing text for certain
kinds of information.

=head2 regexp

An alternative abbreviation of L</regex> that usually occurs in non-Perl 6
contexts.

=head2 reification

=head2 reify

=head2 REPL

Read Eval Print Loop.  Read a line of code, evaluate, print, wait for new line
of code.

=head2 repository

=head2 require

=head2 revert

=head2 roast

The Perl 6 L<specification tests|/spectest>, which live here: L<https://github.com/perl6/roast/>
Originally developed for L</pugs>, it now serves all Perl 6 implementations.
Why roast? It's the B<r>epository B<o>f B<a>ll B<s>pec B<t>ests.

=head2 role

=head2 RPA

Resizable L</PMC> Array.

=head2 RC

1) Release Candidate, a last chance to find terrible bugs or non-portabilities
before the actual release.

2) RosettaCode, L<http://rosettacode.org>, a site for comparing snippets from
different languages in how they solve various tasks.

3) Request Context.

=head2 RT

Request Tracker (L<http://rt.perl.org/>).  To open a ticket, email
C<rakudobug@perl.org>.

=head2 runtime

=head1 S

=head2 sanity test

A test for a basic feature that robs your sanity if it doesn't work, and the
fact that it doesn't work goes unnoticed.

=head2 scalar

=head2 segfault

See L</segmentation fault>.

=head2 segmentation fault

Something that should never, ever happen.  Complain on #perl6 if you see one.

=head2 serialization

=head2 setting

=head2 sigil

In Perl, the sigil is the first character of a variable name.
It must be either C<$>, C<@>, C<%>, or C<&> respectively for a scalar,
array, hash, or code variable.  See also L</twigil>.

=head2 sink context

=head2 sixplanet

=head2 slurpy

=head2 slushy

A specification that has frozen chunks in it, but remains frustratingly fluid.
Ranges from S02 and S03 which are nearly frozen, to S16 which is more like a
glass of ice water.

=head2 spectest

=head2 spesh

A functionality of the MoarVM platform that uses run-time gathered data to
improve commonly used pieces of bytecode. It is much like a JIT Compiler,
except that those usually output machine code rather than bytecode.

=head2 splat

=head2 star

See L</Rakudo *>.

=head2 STM

Software Transactional Memory

=head2 Str

=head2 sub

=head2 subroutine

=head2 Synopsis

The current human-readable description of the Perl 6 language.  Still in
development.  Much more a community effort than the L</Apocalypse>s
and L<Exegeses|/Exegesis> were.

=head1 T

=head2 TheDamian

L</IRC> screen name for Damian Conway, writer of the original
L<Exegeses|/Exegesis>.

=head2 thinko

A thinkographical error; i.e. a small mistake made by improperly expecting
code to L</DWIM> or from an interrupted thought process.

=head2 thread

=head2 thunk

A piece of code that isn't immediately executed, but doesn't have an
independent scope.

Examples for thunks:

    my $a;
    $a = 1 if 1;
 #  ^^^^^^ thunk

    class MyClass {
        has $.attr = 42 + 23;
        #            ^^^^^^^ thunk

        method x($attr = say 42) {
            #            ^^^^^^ thunk
        }
    }

    $a = 1 || say 2;
    #         ^^^^^ thunk

=head2 TimToady

L</IRC> screen name for Larry Wall, creator of Perl. The name comes from the
pronunciation of L</TMTOWTDI> as a word.

=head2 TIMTOWTDI

An alternative form of L</TMTOWTDI>, explicitly including the "is" from
the contraction "There's".

=head2 TMTOWTDI

"There's More Than One Way To Do It", the Perl motto.


=head2 token

=head2 topic

=head2 trait

=head2 TTIAR

Two Terms In A Row.

=head2 tpyo

Typo.

=head2 tuit

The mystical unit of effort in the open source community.  Sometimes
materialized in wooden nickels.

=head2 twigil

A secondary L</sigil>. For example, C<%*ENV> has a sigl of C<%> and
a twigil of C<*>.

See L<http://perlcabal.org/syn/S02.html#Twigils>

=head1 U

=head2 ufo

=head2 UGT

"Universal Greeting Time" - ie, it's always "morning".

=head2 unit

See L</compilation unit>.

=head2 UNIT::

=head2 unslushing

=head1 V

=head2 ver

Short way to indicate L</version>.

=head2 version

=head2 VM

Virtual Machine.  Such as L</Parrot>, L</JVM> and L</MoarVM>.

=head2 v5

Stands for "Perl, version 5" and is used in code to indicate that the code is
Perl 5:

    use v5;

=head2 v6

Stands for "Perl, version 6" and is used in code to indicate that the code is
written in Perl 6:

    use v6;

=head1 W

=head2 warnocked

This lemma will never be explained.

=head2 WAT

L<https://www.destroyallsoftware.com/talks/wat>.

=head2 wfm

Works For Me.

=head2 Whatever

L<http://doc.perl6.org/type/Whatever>.

=head2 whitespace

=head2 ww

Short for C<wrong window>.  When on IRC, someone types something in a channel
that was intended for another channel, or for a private message.

=head1 X

=head2 XY Problem

Sometimes people want to achieve X, and think Y is the best way to do it. So
they ask "How do I do Y?", but doing Y is actually harder or less idiomatic
than solving X some other way. So the person asking how to do Y has an XY
problem.

=head1 Y

=head2 yoleaux

The IRC-bot on #perl6 that is your personal assistant.
See L<https://github.com/dpk/yoleaux>.

=head1 Z

=head1 *

Oh, um... L</Whatever>.

=head2 .

=head2 ..

=head2 ...

=head2 :

Everybody wants the colon.

=head2 ?

=head2 *

=head2 @_

The Perl 5 style argument list.
Something you should stop using, and use subroutine signatures instead.

=head2 $_

=head2 %_

=head2 ++

Way to increase L</karma> on IRC.

=head2 &

Sigil for executable code.  Also used at the end of a line of an L</IRC>
message to indicate the user is away, doing something else in the background.
For instance:

  sleep&

=head2 6model

The "new object model"/L</MOP> that's currently in rakudo.

=for vim:set expandtab sw=4:
