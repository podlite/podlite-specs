
=encoding utf8

=head1 TITLE

Synopsis 16: I/O

=head1 AUTHORS

    Largely, the authors of the related Perl 5 docs.
    Larry Wall <larry@wall.org>
    Mark Stosberg <mark@summersault.com>
    Tim Nelson <wayland@wayland.id.au>
    Daniel Ruoso <daniel@ruoso.com>
    Elizabeth Mattijsen <liz@dijkmat.nl>

=head1 VERSION

    Created: 12 Sep 2006

    Last Modified: 23 Sep 2014
    Version: 25

Many of these functions will work as in Perl 5, except we're trying to rationalize everything into roles.  For
now you can assume most of the important functions will automatically
be in the * namespace.  However, with IO operations in particular,
many of them are really methods on an IO handle, and if there is a
corresponding global function, it's merely an exported version of
the method.

=head1 IO

=head2 Overridable IO handles

In Perl 6, there are the I<standard> IO handles, and any number of overriding
inner filehandles for the same symbol.

The I<standard> handles are our old familiar friends (with new names).
Standard input changed from STDIN to C<$*IN>, standard output changed
from STDOUT to C<$*OUT>, and standard error changed from STDERR to
C<$*ERR>.  In Perl 6 these symbols represent more of a concept than
a given filehandle, since the meaning is contextually determined.
The process's version of these handles live in the C<PROCESS::>
namespace, which is more global than the per-interpreter C<GLOBAL::>
namespace.

When no explicit filehandle is used, the standard IO operators are
defined in terms of the dynamic variables.  So the C<say> function
prints to C<$*OUT>, while C<note> prints to C<$*ERR>.  The C<lines()>
term inputs from C<$*ARGFILES> which defaults to C<$*IN> in the absence of any
filenames.  So any given dynamic scope (interpreter,
thread, function or method call) may redefine the current meaning of
any of those filehandles within the dynamic scope of itself and of
its called routines.

So to put it another way, when you write something like

  say "Howdy, world!"

the C<say> function looks for the current meaning of C<$*OUT>, and
takes the closest definition it can find in its callers.  If none
of the callers have overridden the definition, it looks in the
interpreter's C<GLOBAL> namespace.  If the interpreter hasn't overridden
the meaning, it takes the meaning from C<PROCESS>.  In essence, any
dynamic scope in Perl 6 is allowed to do IO redirection much like
a Unix shell does with its subprocesses, albeit with a different
syntax:

  {
      my $*OUT will leave *.close = open $newfile, :w;
      say "Written to $newfile";
  }
  # stdout reverts to outer scope's definition, and closed the file

In short:

              default handle
    routine   for sub form    purpose
    =======   ===========     =======
    print     $*OUT           string-based writing
    say       $*OUT           string-based writing
    get       $*ARGFILES      read a line (Str)
    lines     $*ARGFILES      read all lines (Str)
    words     $*ARGFILES      read all words (Str)
    read                      binary reading (Buf)
    write                     binary writing (Buf)

=head2 Path Names and the .IO coercer

Path names are just strings (C<Str>).  Methods that return path names, will
just return strings.  As soon as you need to do manipulation on the path name
(e.g. to find out its C<basename> or C<extension>), you can create an
C<IO::Path> object out of the string by applying the C<.IO> coercer:

  my $path = $filename.IO;

Then you can use any of the C<IO::Path> methods, such as C<open>:

  my $handle = $newfile.IO.open(:w);

Note that the C<open()> sub, is just really syntactic sugar for the above:

  my $handle = open $newfile, :w;

=head2 $*SPEC

The current system's path semantics are encapsulated in C<$*SPEC> dynamic
variable.  It adhers to the C<IO::Spec> interface, and is automatically
initialized for the current environment.  But like any dynamic variable,
can be overridden in a scope:

  { # Win32 path semantics in here
      my $*SPEC = IO::Spec::Win32;
      ...  # your code
  }
  # original path semantics here again

Please note that it does B<not> need to be an instantiated object: the standard
C<IO::Spec> subclasses only provide class methods, and therefore do not need an
instantiated object.  But that could be different for a very specific
third-party implementation of an C<IO::Spec> class.

=head2 $*CWD and chdir()

The dynamic variable $*CWD is an C<IO::Path> object of the current working
directory.  It is normally set with the C<chdir()> function, which will check
whether the specified path exists as a directory.  To facilitate setting a
locally scoped version of $*CWD, you can specify the variable to be set as
a second parameter to C<chdir()>.

  chdir($dir);   # sets $*CWD of outer scope, usually PROCESS::<$*CWD>

  {
      chdir($dir, my $*CWD);  # set $*CWD in this scope
  }

The C<chdir()> function returns a C<X::IO::Chdir> Failure if the path does
not exist, is not accessible, or is not a directory.  Otherwise it will
return C<True>.  Any C<Failure> generally will be thrown immediately if
called like above.

Please note that the path in C<$*CWD> does not have any bearing on what the
underlying operating system's concept of a "current directory".  It is simply
the path that will prepended before any implicit or explicit relative paths,
and the default path that will be used when executing a sub-process.

=head2 $*TMPDIR and chtmpdir()

The dynamic variable C<$*TMPDIR> is an C<IO::Path> object which points to the
system's temporary directory.  It is normally set with the C<chtmpdir()>,
which will check whether the specified path exists as a directory and is
writable.  To facilitate setting a locally scoped version of $*TMPDIR, you
can specify the variable to be set as the second parameter, just as with
C<chdir()>:

  chtmpdir($dir);   # sets $*TMPDIR of outer scope, usually PROCESS::<$*TMPDIR>

  {
      chtmpdir($dir, my $*TMPDIR);  # set $*TMPDIR in this scope
  }

The C<chtmpdir()> function returns a C<X::IO::Chtmpdir> Failure if the path
does not exist, is not accessible, is not a directory or isn't writable.
Otherwise it will return C<True>.

The initialization of C<$*TMPDIR> at startup, is delegated to the C<.tmpdir>
method of the C<$*SPEC> setting that is set at startup.

=head2 $*HOME and chhomedir()

The dynamic variable C<$*HOME> is an C<IO::Path> object which points to the
user's home directory.  It is normally set with the C<chhomedir()>, which will
check whether the specified path exists as a directory and is writable.  To
facilitate setting a locally scoped version of $*HOME, you can specify the
variable to be set as the second parameter, just as with C<chdir()>:

  chhomedir($dir);   # sets $*HOME of outer scope, usually PROCESS::<$*HOME>

  {
      chhomedir($dir, my $*HOME);  # set $*HOME in this scope
  }

The C<chhomedir()> function returns a C<X::IO::Chhomedir> Failure if the path
does not exist, is not accessible, is not a directory or isn't writable.
Otherwise it will return C<True>.

The initialization of C<$*HOME> at startup, is delegated to the C<.homedir>
method of the C<$*SPEC> setting that is set at startup.

=head2 System dependent path semantics and IO::Spec

Each time an C<IO::Path> object is created, the current C<$*SPEC> will be
encapsulated in the object, to be used for all path related operations.

Of course, it is also possible to specify a specify a specific system's
path semantics module when creating an C<IO::Path> object with the C<:SPEC>
named parameter:

  my $SPEC = IO::Spec::Win32;
  my $path = $fileonNTFS.IO(:$SPEC);

or:

  my $path = $fileonNTFS.IO(:SPEC<Win32>); # auto-expand to IO::Spec::Win32

=head2 Functions, Roles and Classes

The roles and classes that define most of the functionality for IO are defined
in S32-setting-library/IO.pod.  The main functions used are listed in S29 with
references to S32-setting-library/IO.pod.  An overview:

=head3 Functions

  print(@text);                 # print text on $*OUT
  say(@text);                   # print text + newline on $*OUT
  note(@text);                  # print text + newline on $*ERR
  dd($a,$b,$c);                 # tiny data dumper on $*ERR
  $line = prompt($message);     # print message on $*OUT, obtain next line

  $handle = open($path);        # open a file, return IO::Handle

  @paths = dir;                 # paths (as Str) in $*CWD
  @paths = dir($dir);           # paths (as Str) in $dir

  $contents = slurp($handle);   # read all that's left of an opened filehandle
  $contents = slurp($filename); # read all from given filename

  spurt($handle,$contents);     # write $contents to $handle
  spurt($filename,$contents);   # write $contents to $filename

  mkdir($dir);                  # create a directory
  rmdir($dir);                  # remove a directory

  chdir($dir);                  # set $*CWD
  chdir($dir, my $*CWD);        # set $*CWD for the current scope

  chtmpdir($dir);               # set $*TMPDIR
  chtmpdir($dir, my $*TMPDIR);  # set $*TMPDIR for the current scope

  chhomedir($dir);              # set $*HOME
  chhomedir($dir, my $*HOME);   # set $*HOME for the current scope

  copy                          # copy a file
  rename($from,$to);            # rename (move) a file on same physical storage
  move($from,$to);              # move (rename) a file to other storage
  unlink($filename);            # remove a file

  link($target,$source);        # create a hard-link to a file
  symlink($target,$source);     # create a symbolic link to a file
  islink($target);              # is the file a symbolic link?
  readlink($target);            # the destination of the symlink ($source)

=head3 IO::FileTestable Role

Role to be consumed by both C<IO::Path> as well as C<IO::Handle>.

  $io.r          $!path of $io is readable by effective uid/gid
  $io.w          $!path of $io is writable by effective uid/gid
  $io.x          $!path of $io is executable by effective uid/gid
  $io.o          $!path of $io is owned by effective uid

  $io.R          $!path of $io is readable by real uid/gid
  $io.W          $!path of $io is writable by real uid/gid
  $io.X          $!path of $io is executable by real uid/gid
  $io.O          $!path of $io is owned by real uid

  $io.e          $!path of $io exists
  $io.s          Size of the $!path of $io in bytes
  $io.z          $!path of $io has zero size (an empty file)

  $io.f          $!path of $io is a plain file
  $io.d          $!path of $io is a directory
  $io.l          $!path of $io is a symbolic link
  $io.p          $!path of $io is a named pipe (FIFO)
  $io.S          $!path of $io is a socket
  $io.b          $!path of $io is a block special file
  $io.c          $!path of $io is a character special file

  $io.u          $!path of $io has setuid bit set
  $io.g          $!path of $io has setgid bit set
  $io.k          $!path of $io has sticky bit set

  $io.accessed   last access time of $!path of $io (if available)
  $io.modified   last modified time of $!path of $io
  $io.changed    last (metadata) changed time of $!path of $io

To allow for easy chaining of file tests, there is an C<.all> method that can
be fed the tests to be tried as a C<Parcel> of strings.  The value returned
will be the first non-True value, or the final True value.

  say "rwx" if $io.all: <r w x>;

  if $io.all(<r w x s>) -> $size {
      say "rwx $size bytes";
  }

=head3 IO::Spec Class

The C<IO::Spec> itself only has one method: C<select>.  It takes an OS
descriptive name (usually something like what C<$*DISTRO.name> gives) and
returns the type object of the appropriate C<IO::Spec> subclass.

  my $*SPEC = IO::Spec.select("MSWin32");  # gives IO::Spec::Win32

Such a subclass should provide at least the following methods (in alphabetical
order):

  abs2rel        convert an absolute path into a relative one
  canonpath      return a canonical version of the given path
  catdir         concatenate directories
  catpath        create a path from volume/directories/filename
  curdir         the path to the current directory (usually '.')
  devnull        the path to the bit bucket (on Unixy systems '/dev/null')
  is-absolute    whether the path is absolute
  join           create a path from hash with volume/directories/filename
  PATH           %ENV<PATH> interpreted as paths
  rel2abs        convert a relative path into an absolute one
  rootdir        the path to the root directory (on Unixy systems '/')
  splitdir       split directories
  splitpath      split a path into volume/directories/filename as Parcel
  split          split a path into volume/directories/filename in hash
  tmpdir         path of the first writeable directory for temporary files
  updir          the path to the path directory (usually '..')

=head3 IO::Path Class

  class IO::Path is Cool does IO::FileTestable { }

The official way to create an C<IO::Path> object is with the C<new> method.
Apart from the C<path> positional, it also takes optional C<:SPEC> and
C<CWD> named parameters.  The C<.IO> coercer (which takes the same parameters
as C<.new>) is the syntactic sugar that will most likely be used most often.

  my $path = $filename.IO;                  # current $*SPEC/$*CWD
  my $path = $filename.IO(:SPEC(*$SPEC));   # specific IO::SPEC
  my $path = $filename.IO(:SPEC(*$SPEC), :CWD($*CWD));

which would be the same as:

  my $path = IO::Path.new($filename);
  my $path = IO::Path.new($filename, :SPEC(*$SPEC));
  my $path = IO::Path.new($filename, :SPEC(*$SPEC), :CWD($*CWD));

If you only have filename components to start with, you can also create an
C<IO::Path> object with the C<:volume>, C<:directory> and C<:basename> named
parameters:

  my $path = IO::Path.new( :$volume, :$directory, :$basename );

The following methods are also provided (in alphabetical order):

  absolute       the absolute, canonical path
  basename       the basename of the path
  chdir          change $*CWD if directory
  child          append basename to path, return new object for that
  chmod          change attributes of path
  contents       files in path (if dir)
  copy           create a copy of file
  directory      the directory part of the absolute path
  is-absolute    is the (original) path absolute
  is-relative    is the (original) path relative
  lines          contents of file as lines
  mkdir          create directory
  move           move (rename) to other storage
  open           attempt to open file, return IO::Handle
  parent         remove last portion of path, return new object for that
  pred           previous logical path, return new object for that
  relative       the relative path against CWD
  rename         rename (move) to other name
  resolve        follow symlinks to the real path, return new object for that
  rmdir          remove directory if empty directory
  succ           next logical path, return new object for that
  unlink         remove file
  volume         the volume of the path (if any)
  words          contents of file as words

=head3 IO::Handle Class

  class IO::Handle does IO::FileTestable { }

The C<IO::Handle> object is usually B<not> directly instantiated, but usually
with C<open()> or C<IO::Path.open>.  Nonetheless, you B<can> create an
C<IO::Handle> object with just a path:

  my $handle = IO::Handle.new($filename);
  my $handle = IO::Handle.new($filename, :SPEC(*$SPEC));
  my $handle = IO::Handle.new($filename, :SPEC(*$SPEC), :CWD($*CWD));

This does not interact with anything at all and will appear as if the file
has been C<.close>d.  The C<.open> method does interact with the file system:

  $handle.open;  # same as $handle = $filename.IO.open

It either returns True, or a C<Failure> with additional information.

The other methods of the C<IO::Handle> class are only valid B<after> the
C<.open> has been called succesfully:

  close          close file handle, flush buffers
  encoding       set/return encoding of file handle
  eof            file pointer reached end of file
  fileno         file descriptor (usually a native integer)
  flush          flush buffers
  get            get next line from file
  getc           get next character from file
  IO             return new IO::Path of path of file
  lines          return rest of contents of file as lines
  opened         is the file open?
  path           return new IO::Path of path of file
  print          write characters to file
  read           read bytes from file
  say            write characters + newline to file
  seek           move file pointer to given position
  slurp          return rest of contents of file
  t              is the file a TTY (as a person looking?)
  tell           return position of file pointer
  words          return rest of contents of file as words
  write          write bytes to file

=head3 Interplay between Roles and Classes

These classes and roles may cache and share pertinent information for better
performance.

=for vim:set expandtab sw=4:
